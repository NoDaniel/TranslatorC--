// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: C--.flex


import java_cup.runtime.Symbol;

// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Lexer implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\10\u3000\31\u1f00\1\u0100\1\u3100\1\u3200"+
    "\1\u0100\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100"+
    "\1\u4200\1\u4300\1\u1f00\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u4f00\1\u1f00"+
    "\1\u5000\1\u5100\1\u5200\1\u1f00\3\u0100\1\u5300\1\u5400\1\u5500"+
    "\12\u1f00\4\u0100\1\u5600\17\u1f00\2\u3c00\1\u5700\41\u1f00\2\u0100"+
    "\1\u5800\1\u5900\2\u1f00\1\u5a00\1\u5b00\27\u3c00\1\u5c00\2\u3c00"+
    "\1\u5d00\45\u1f00\1\u5e00\1\u5f00\1\u6000\11\u1f00\1\u6100\24\u1f00"+
    "\1\u6200\1\u6300\1\u1f00\1\u6400\1\u6500\1\u6600\1\u6700\2\u1f00"+
    "\1\u6800\5\u1f00\1\u6900\1\u6a00\1\u6b00\5\u1f00\1\u6c00\1\u6d00"+
    "\4\u1f00\1\u6e00\2\u1f00\1\u6f00\16\u1f00\246\u0100\1\u7000\20\u0100"+
    "\1\u7100\1\u7200\25\u3c00\1\u7300\34\u3c00\1\u7400\14\u1f00\2\u0100"+
    "\1\u7500\u0b05\u1f00\1\u7600\1\u7700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\4\16\0\4\5"+
    "\1\1\1\6\1\7\1\10\1\11\1\5\1\12\1\5"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\5\1\21"+
    "\12\22\1\5\1\23\1\24\1\25\1\26\2\5\32\27"+
    "\1\30\1\5\1\31\1\5\1\32\1\5\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\27\1\41\1\42\2\27"+
    "\1\43\1\27\1\44\1\45\2\27\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\3\27\1\54\1\55\1\56\1\5"+
    "\6\0\1\57\32\0\2\5\4\11\4\5\1\32\2\5"+
    "\1\0\7\5\1\32\4\5\1\32\5\5\27\32\1\5"+
    "\37\32\1\5\u01ca\32\4\5\14\32\16\5\5\32\7\5"+
    "\1\32\1\5\1\32\21\5\160\60\5\32\1\5\2\32"+
    "\2\5\4\32\1\5\1\61\6\5\1\32\1\5\3\32"+
    "\1\5\1\32\1\5\24\32\1\5\123\32\1\5\213\32"+
    "\1\5\5\60\2\61\236\32\10\61\1\5\46\32\2\5"+
    "\1\32\6\5\1\61\47\32\1\61\6\5\1\11\1\5"+
    "\55\60\1\5\1\60\1\5\2\60\1\5\2\60\1\5"+
    "\1\60\10\5\33\32\4\5\1\61\3\32\15\5\5\0"+
    "\6\5\1\11\4\5\13\60\5\5\53\32\37\60\4\5"+
    "\2\32\1\60\143\32\1\5\1\32\7\60\1\0\1\5"+
    "\6\60\2\32\2\60\1\5\4\60\2\32\12\60\3\32"+
    "\2\5\1\32\17\5\1\0\1\32\1\60\36\32\33\60"+
    "\2\5\131\32\13\60\1\32\16\5\12\60\41\32\11\60"+
    "\2\32\4\5\1\32\2\5\1\61\2\5\26\32\4\60"+
    "\1\32\11\60\1\32\3\60\1\32\5\60\22\5\31\32"+
    "\3\60\4\5\13\61\65\5\1\32\1\61\13\32\10\61"+
    "\1\5\10\61\25\5\17\61\1\5\1\61\33\60\1\61"+
    "\4\60\66\32\3\60\1\32\22\60\1\32\7\60\12\32"+
    "\2\60\2\5\12\60\1\5\7\32\1\61\7\32\1\61"+
    "\3\60\1\5\10\32\2\5\2\32\2\5\26\32\1\5"+
    "\7\32\1\5\1\32\3\5\4\32\2\5\1\60\1\32"+
    "\7\60\2\5\2\60\2\5\3\60\1\32\10\5\1\60"+
    "\4\5\2\32\1\5\3\32\2\60\2\5\12\60\2\32"+
    "\2\11\7\5\1\11\1\61\1\5\1\61\2\5\3\60"+
    "\1\5\6\32\4\5\2\32\2\5\26\32\1\5\7\32"+
    "\1\5\2\32\1\5\2\32\1\5\2\32\2\5\1\60"+
    "\1\5\5\60\4\5\2\60\2\5\3\60\3\5\1\60"+
    "\7\5\4\32\1\5\1\32\7\5\14\60\3\32\1\60"+
    "\13\5\3\60\1\5\11\32\1\5\3\32\1\5\26\32"+
    "\1\5\7\32\1\5\2\32\1\5\5\32\2\5\1\60"+
    "\1\32\10\60\1\5\3\60\1\5\3\60\2\5\1\32"+
    "\17\5\2\32\2\60\2\5\12\60\1\5\1\11\7\5"+
    "\7\61\1\5\3\60\1\5\10\32\2\5\2\32\2\5"+
    "\26\32\1\5\7\32\1\5\2\32\1\5\5\32\2\5"+
    "\1\60\1\32\7\60\2\5\2\60\2\5\3\60\10\5"+
    "\2\60\4\5\2\32\1\5\3\32\2\60\2\5\12\60"+
    "\1\5\1\32\20\5\1\60\1\32\1\5\6\32\3\5"+
    "\3\32\1\5\4\32\3\5\2\32\1\5\1\32\1\5"+
    "\2\32\3\5\2\32\3\5\3\32\3\5\14\32\4\5"+
    "\5\60\3\5\3\60\1\5\4\60\2\5\1\32\6\5"+
    "\1\60\16\5\12\60\11\5\1\11\6\5\1\61\3\60"+
    "\1\61\10\32\1\5\3\32\1\5\27\32\1\5\12\32"+
    "\1\61\5\32\3\5\1\32\7\60\1\5\3\60\1\5"+
    "\4\60\7\5\2\60\1\5\2\32\1\61\5\5\2\32"+
    "\2\60\2\5\12\60\20\5\2\61\2\60\1\5\10\32"+
    "\1\5\3\32\1\5\27\32\1\5\12\32\1\5\5\32"+
    "\2\5\1\60\1\32\7\60\1\5\3\60\1\5\4\60"+
    "\7\5\2\60\7\5\1\32\1\5\2\32\2\60\2\5"+
    "\12\60\1\5\2\32\15\5\2\61\2\60\1\5\10\32"+
    "\1\5\3\32\1\5\51\32\2\61\1\32\7\60\1\5"+
    "\3\60\1\5\4\60\1\32\5\5\3\61\1\60\7\5"+
    "\1\61\2\32\2\60\2\5\12\60\12\5\6\32\2\5"+
    "\2\60\1\5\22\32\3\5\30\32\1\5\11\32\1\5"+
    "\1\32\2\5\7\32\3\5\1\60\4\5\6\60\1\5"+
    "\1\60\1\5\10\60\6\5\12\61\2\5\2\60\15\5"+
    "\60\32\1\60\2\32\7\60\4\5\1\11\7\32\10\60"+
    "\1\5\12\60\47\5\2\32\1\5\1\32\1\5\1\61"+
    "\2\32\1\61\1\32\1\5\1\61\1\32\6\61\4\32"+
    "\1\61\7\32\1\61\3\32\1\5\1\32\1\5\1\32"+
    "\2\61\2\32\1\61\4\32\1\60\2\32\6\60\1\61"+
    "\2\60\1\32\2\5\5\32\1\5\1\32\1\5\6\60"+
    "\2\5\12\60\2\5\4\32\40\5\1\32\27\5\2\60"+
    "\6\5\12\60\13\5\1\60\1\5\1\60\1\5\1\60"+
    "\4\5\2\60\10\32\1\5\44\32\4\5\24\60\1\5"+
    "\2\60\5\32\13\60\1\5\44\60\11\5\1\60\71\5"+
    "\53\32\24\60\1\32\12\60\6\5\6\32\4\60\4\32"+
    "\3\60\1\32\3\60\2\32\7\60\3\32\4\60\15\32"+
    "\14\60\1\32\17\60\2\5\46\32\1\5\1\32\5\5"+
    "\1\32\2\5\53\32\1\5\115\32\1\5\4\32\2\5"+
    "\7\32\1\5\1\32\1\5\4\32\2\5\51\32\1\5"+
    "\4\32\2\5\41\32\1\5\4\32\2\5\7\32\1\5"+
    "\1\32\1\5\4\32\2\5\17\32\1\5\71\32\1\5"+
    "\4\32\2\5\103\32\2\5\3\60\40\5\20\32\20\5"+
    "\125\32\1\61\2\5\6\61\3\5\u016c\32\2\5\21\32"+
    "\1\5\32\32\5\5\113\32\3\5\3\32\10\61\7\5"+
    "\15\32\1\5\4\32\3\60\13\5\22\32\3\60\13\5"+
    "\22\32\2\60\14\5\15\32\1\5\3\32\1\5\2\60"+
    "\14\5\64\32\40\60\3\5\1\32\3\5\1\11\1\32"+
    "\1\60\2\5\12\60\41\5\3\60\2\5\12\60\6\5"+
    "\130\32\1\61\7\5\51\32\1\60\1\32\5\5\106\32"+
    "\12\5\35\32\2\61\1\5\14\60\4\5\14\60\12\5"+
    "\12\60\36\32\2\5\5\32\13\5\54\32\4\5\21\60"+
    "\7\32\2\60\6\5\12\60\46\5\27\32\5\60\4\5"+
    "\65\32\12\60\1\5\35\60\2\5\13\60\6\5\12\60"+
    "\15\5\1\32\10\5\17\61\101\5\5\60\57\32\21\60"+
    "\7\32\4\5\12\60\21\5\11\60\14\5\3\60\36\32"+
    "\15\60\2\32\12\60\54\32\16\60\14\5\44\32\24\60"+
    "\10\5\12\60\3\5\3\32\12\60\44\32\2\5\11\61"+
    "\7\5\53\61\2\5\3\61\20\5\3\60\1\5\25\60"+
    "\4\32\1\60\4\32\3\60\2\32\4\61\5\5\300\32"+
    "\47\60\23\61\1\5\1\61\4\60\26\32\2\5\6\32"+
    "\2\5\46\32\2\5\6\32\2\5\10\32\1\5\1\32"+
    "\1\5\1\32\1\5\1\32\1\5\37\32\2\5\65\32"+
    "\1\5\7\32\1\5\1\32\3\5\3\32\1\5\7\32"+
    "\3\5\4\32\2\5\6\32\4\5\15\32\5\5\3\32"+
    "\1\5\7\32\16\5\5\0\30\5\2\3\5\0\20\5"+
    "\2\32\23\5\1\32\13\5\5\0\5\5\6\0\1\5"+
    "\1\32\15\5\1\32\20\5\15\32\3\5\33\11\25\5"+
    "\15\60\4\61\1\60\3\61\14\60\21\5\1\32\4\5"+
    "\1\32\2\5\12\32\1\5\1\32\3\5\5\32\6\5"+
    "\1\32\1\5\1\32\1\5\1\32\1\5\4\32\1\5"+
    "\13\32\2\5\4\32\5\5\5\32\4\5\1\32\21\5"+
    "\51\32\u022d\5\64\61\26\5\57\32\1\5\57\32\1\5"+
    "\205\32\6\5\4\32\3\60\2\32\14\5\46\32\1\5"+
    "\1\32\5\5\1\32\2\5\70\32\7\5\1\32\17\5"+
    "\1\60\27\32\11\5\7\32\1\5\7\32\1\5\7\32"+
    "\1\5\7\32\1\5\7\32\1\5\7\32\1\5\7\32"+
    "\1\5\7\32\1\5\40\60\57\5\1\32\325\5\3\32"+
    "\31\5\11\32\6\60\1\5\5\32\2\5\5\32\4\5"+
    "\126\32\2\5\2\60\2\5\3\32\1\5\132\32\1\5"+
    "\4\32\5\5\51\32\2\61\1\5\136\32\21\5\33\32"+
    "\65\5\306\32\112\5\315\32\43\61\20\5\215\32\103\5"+
    "\56\32\2\5\15\32\3\5\20\32\12\60\2\32\24\5"+
    "\57\32\1\60\3\61\1\5\12\60\1\5\31\32\7\61"+
    "\1\60\120\32\2\60\45\5\11\32\2\5\147\32\2\5"+
    "\4\32\1\61\4\32\14\61\13\32\25\61\2\5\5\61"+
    "\60\5\1\61\12\32\1\60\3\32\1\60\4\32\1\60"+
    "\27\32\5\60\20\5\1\11\7\5\64\32\14\5\2\60"+
    "\62\32\21\60\1\61\12\5\12\60\6\5\22\60\6\32"+
    "\3\5\1\32\1\5\3\61\12\60\34\32\10\60\2\5"+
    "\27\32\15\60\14\5\35\32\3\5\4\60\57\32\16\60"+
    "\16\5\1\32\12\60\6\5\37\61\1\5\51\32\16\60"+
    "\11\5\3\32\1\60\10\32\2\60\2\5\12\60\6\5"+
    "\27\32\3\5\1\32\1\60\4\61\60\32\1\60\1\32"+
    "\3\60\2\32\2\60\5\32\2\60\1\32\1\60\1\32"+
    "\30\5\3\32\2\5\13\32\5\60\2\5\3\32\2\60"+
    "\12\5\6\32\2\5\6\32\2\5\6\32\11\5\7\32"+
    "\1\5\7\32\1\5\53\61\1\5\14\61\10\5\120\61"+
    "\43\32\10\60\1\5\2\60\2\5\12\60\6\5\244\32"+
    "\14\5\27\32\4\5\61\32\4\5\u0100\3\156\32\2\5"+
    "\152\32\46\5\7\32\14\5\5\32\5\5\1\32\1\60"+
    "\12\32\1\5\15\32\1\5\5\32\1\5\1\32\1\5"+
    "\2\32\1\5\2\32\1\5\154\32\41\5\153\32\22\5"+
    "\100\32\2\5\66\32\50\5\14\32\1\11\3\5\20\60"+
    "\20\5\7\60\11\61\3\5\2\32\30\5\3\32\31\5"+
    "\1\11\6\5\5\32\1\5\207\32\2\5\1\0\4\5"+
    "\1\11\13\5\12\60\7\5\32\32\4\5\1\32\1\5"+
    "\32\32\13\5\131\32\3\5\6\32\2\5\6\32\2\5"+
    "\6\32\2\5\3\32\3\5\2\11\3\5\2\11\22\5"+
    "\3\0\4\5\14\32\1\5\32\32\1\5\23\32\1\5"+
    "\2\32\1\5\17\32\2\5\16\32\42\5\173\32\105\5"+
    "\65\32\210\5\1\60\202\5\35\32\3\5\61\32\17\5"+
    "\1\61\37\5\37\32\1\61\15\5\3\61\33\32\5\5"+
    "\53\61\5\5\36\32\2\5\44\32\4\5\10\32\1\5"+
    "\5\32\52\5\236\32\2\5\12\60\6\5\44\61\4\5"+
    "\44\61\4\5\50\61\10\5\64\61\234\5\u0137\61\11\5"+
    "\26\61\12\5\10\61\230\5\6\32\2\5\1\32\1\5"+
    "\54\32\1\5\2\32\3\5\1\32\2\5\27\32\12\5"+
    "\27\61\11\5\37\61\101\5\23\61\1\5\2\61\12\5"+
    "\26\32\12\5\32\32\106\5\70\32\6\5\2\32\100\5"+
    "\1\32\3\60\1\5\2\60\5\5\4\60\4\32\1\5"+
    "\3\32\1\5\33\32\2\61\2\5\3\60\4\5\1\60"+
    "\40\5\35\32\3\5\35\61\43\5\10\61\1\5\36\61"+
    "\31\5\66\32\12\5\26\32\12\5\23\32\15\5\22\61"+
    "\156\5\111\32\67\5\63\61\15\5\63\61\15\5\50\61"+
    "\10\5\12\61\306\5\35\61\12\5\1\61\10\5\41\61"+
    "\217\5\27\61\11\5\3\60\65\32\17\60\37\5\12\60"+
    "\17\5\1\61\3\60\55\32\13\60\2\5\1\0\22\5"+
    "\31\32\7\5\12\60\6\5\3\60\44\32\16\60\1\5"+
    "\12\60\4\5\3\61\11\5\44\61\2\5\1\61\11\5"+
    "\3\60\60\32\16\60\4\32\4\5\4\61\3\5\12\60"+
    "\1\61\1\5\1\61\43\5\22\61\1\5\45\61\6\5"+
    "\1\61\101\5\7\61\1\5\1\61\1\5\4\61\1\5"+
    "\17\61\1\5\12\61\7\5\73\61\5\5\12\61\6\5"+
    "\4\61\1\5\10\61\2\5\2\61\2\5\26\61\1\5"+
    "\7\61\1\5\2\61\1\5\5\61\1\5\12\61\2\5"+
    "\2\61\2\5\3\61\2\5\1\61\6\5\1\61\5\5"+
    "\7\61\2\5\7\61\3\5\5\61\213\5\113\61\5\5"+
    "\12\61\4\5\2\61\40\5\106\61\1\5\1\61\10\5"+
    "\12\61\246\5\66\61\2\5\11\61\27\5\6\61\42\5"+
    "\101\61\3\5\1\61\13\5\12\61\46\5\53\32\15\60"+
    "\1\61\7\5\12\60\66\5\33\61\2\5\17\61\4\5"+
    "\12\61\306\5\73\61\145\5\112\61\25\5\1\61\240\5"+
    "\10\61\2\5\56\61\2\5\10\61\1\5\2\61\33\5"+
    "\77\61\10\5\1\61\10\5\112\61\3\5\1\61\42\5"+
    "\71\61\7\5\11\61\1\5\55\61\1\5\11\61\17\5"+
    "\12\61\30\5\36\61\2\5\26\61\1\5\16\61\111\5"+
    "\7\61\1\5\2\61\1\5\54\61\3\5\1\61\1\5"+
    "\2\61\1\5\11\61\10\5\12\61\6\5\6\61\1\5"+
    "\2\61\1\5\45\61\1\5\2\61\1\5\6\61\7\5"+
    "\12\61\u0136\5\27\61\11\5\157\32\53\61\146\5\143\32"+
    "\14\61\21\5\304\61\274\5\57\32\321\5\107\61\271\5"+
    "\71\32\7\5\37\61\1\5\12\61\146\5\36\61\2\5"+
    "\5\61\13\5\67\61\11\5\4\61\14\5\12\61\11\5"+
    "\25\61\5\5\23\61\260\5\100\61\200\5\105\32\6\61"+
    "\4\5\1\61\1\32\56\60\11\61\7\5\4\60\15\32"+
    "\100\5\2\61\1\5\1\61\34\5\370\61\10\5\363\61"+
    "\15\5\2\32\u011d\61\61\5\3\61\21\5\4\61\10\5"+
    "\u018c\61\4\5\153\61\5\5\15\61\3\5\11\61\7\5"+
    "\12\61\3\5\2\61\306\5\5\60\3\5\6\60\10\0"+
    "\10\60\2\5\7\60\36\5\4\60\224\5\3\60\273\5"+
    "\125\32\1\5\107\32\1\5\2\32\2\5\1\32\2\5"+
    "\2\32\2\5\4\32\1\5\14\32\1\5\1\32\1\5"+
    "\7\32\1\5\101\32\1\5\4\32\2\5\10\32\1\5"+
    "\7\32\1\5\34\32\1\5\4\32\1\5\5\32\1\5"+
    "\1\32\3\5\7\32\1\5\u0154\32\2\5\31\32\1\5"+
    "\31\32\1\5\37\32\1\5\31\32\1\5\37\32\1\5"+
    "\31\32\1\5\37\32\1\5\31\32\1\5\37\32\1\5"+
    "\31\32\1\5\10\32\2\5\62\60\67\61\4\5\62\61"+
    "\10\5\1\61\16\5\1\61\26\5\5\61\1\5\17\61"+
    "\120\5\7\61\1\5\21\61\2\5\7\61\1\5\2\61"+
    "\1\5\5\61\325\5\55\61\3\5\16\61\2\5\12\61"+
    "\4\5\1\61\u0171\5\72\61\6\5\305\61\13\5\7\61"+
    "\51\5\114\61\4\5\12\61\246\5\4\32\1\5\33\32"+
    "\1\5\2\32\1\5\1\32\2\5\1\32\1\5\12\32"+
    "\1\5\4\32\1\5\1\32\1\5\1\32\6\5\1\32"+
    "\4\5\1\32\1\5\1\32\1\5\1\32\1\5\3\32"+
    "\1\5\2\32\1\5\1\32\2\5\1\32\1\5\1\32"+
    "\1\5\1\32\1\5\1\32\1\5\1\32\1\5\2\32"+
    "\1\5\1\32\2\5\4\32\1\5\7\32\1\5\4\32"+
    "\1\5\4\32\1\5\1\32\1\5\12\32\1\5\21\32"+
    "\5\5\3\32\1\5\5\32\1\5\21\32\164\5\32\61"+
    "\6\5\32\61\6\5\32\61\166\5\327\32\51\5\65\32"+
    "\13\5\336\32\2\5\u0182\61\16\5\u0131\61\37\5\36\32"+
    "\343\5\1\0\36\5\140\0\200\5\360\60\20\5";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[30720];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\2\1\1\4\1\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\4\1\21\1\22\12\4\1\23"+
    "\1\1\1\24\1\1\1\25\1\0\1\26\1\0\2\27"+
    "\1\30\1\1\1\0\1\31\1\32\1\33\1\34\1\35"+
    "\5\4\1\36\5\4\1\37\1\4\1\40\3\4\1\41"+
    "\4\4\1\42\1\43\1\44\2\4\1\45\1\46\1\4"+
    "\1\47\1\4\1\50\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\310\0\372\0\u012c"+
    "\0\u015e\0\62\0\62\0\62\0\62\0\62\0\62\0\u0190"+
    "\0\u01c2\0\62\0\u01f4\0\u0226\0\u0258\0\u028a\0\62\0\62"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\u044c\0\u047e\0\62\0\u04b0\0\62\0\u04e2\0\62\0\310"+
    "\0\62\0\372\0\62\0\u0514\0\62\0\u0546\0\u04e2\0\62"+
    "\0\62\0\62\0\62\0\62\0\u0578\0\u05aa\0\u05dc\0\u060e"+
    "\0\u0640\0\u028a\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\62"+
    "\0\u076c\0\u028a\0\u079e\0\u07d0\0\u0802\0\u028a\0\u0834\0\u0866"+
    "\0\u0898\0\u08ca\0\u028a\0\u028a\0\u028a\0\u08fc\0\u092e\0\u028a"+
    "\0\u028a\0\u0960\0\u028a\0\u0992\0\u028a\0\u028a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\26\1\32\1\33\1\26\1\34\1\35"+
    "\1\26\1\36\3\26\1\37\1\26\1\40\1\26\1\41"+
    "\1\42\1\43\1\44\1\45\1\0\2\46\64\0\1\3"+
    "\104\0\1\47\34\0\7\50\1\51\52\50\2\52\1\53"+
    "\1\52\1\54\55\52\1\10\10\0\1\10\10\0\1\10"+
    "\4\0\1\10\2\0\22\10\3\0\2\10\13\0\1\55"+
    "\70\0\1\52\62\0\1\21\4\0\1\56\2\0\1\57"+
    "\21\56\4\0\2\57\24\0\1\60\1\61\61\0\1\62"+
    "\61\0\1\63\1\64\33\0\1\10\10\0\1\10\10\0"+
    "\1\26\4\0\1\26\2\0\22\26\3\0\1\10\1\26"+
    "\1\56\1\10\10\0\1\10\10\0\1\31\4\0\1\26"+
    "\2\0\1\31\21\26\3\0\1\10\1\31\1\57\1\10"+
    "\10\0\1\10\10\0\1\26\4\0\1\26\2\0\13\26"+
    "\1\65\6\26\3\0\1\10\1\26\1\56\1\10\10\0"+
    "\1\10\10\0\1\26\4\0\1\26\2\0\10\26\1\66"+
    "\2\26\1\67\6\26\3\0\1\10\1\26\1\56\1\10"+
    "\10\0\1\10\10\0\1\26\4\0\1\26\2\0\11\26"+
    "\1\70\10\26\3\0\1\10\1\26\1\56\1\10\10\0"+
    "\1\10\10\0\1\26\4\0\1\26\2\0\1\26\1\71"+
    "\20\26\3\0\1\10\1\26\1\56\1\10\10\0\1\10"+
    "\10\0\1\26\4\0\1\26\2\0\6\26\1\72\3\26"+
    "\1\73\7\26\3\0\1\10\1\26\1\56\1\10\10\0"+
    "\1\10\10\0\1\26\4\0\1\26\2\0\5\26\1\74"+
    "\14\26\3\0\1\10\1\26\1\56\1\10\10\0\1\10"+
    "\10\0\1\26\4\0\1\26\2\0\14\26\1\75\5\26"+
    "\3\0\1\10\1\26\1\56\1\10\10\0\1\10\10\0"+
    "\1\26\4\0\1\26\2\0\13\26\1\76\6\26\3\0"+
    "\1\10\1\26\1\56\1\10\10\0\1\10\10\0\1\26"+
    "\4\0\1\26\2\0\7\26\1\77\12\26\3\0\1\10"+
    "\1\26\1\56\55\0\1\100\26\0\1\57\4\0\1\56"+
    "\2\0\1\57\21\56\4\0\2\57\2\0\1\53\101\0"+
    "\1\56\4\0\1\56\2\0\22\56\4\0\2\56\1\10"+
    "\10\0\1\10\10\0\1\26\4\0\1\26\2\0\13\26"+
    "\1\101\6\26\3\0\1\10\1\26\1\56\1\10\10\0"+
    "\1\10\10\0\1\26\4\0\1\26\2\0\12\26\1\102"+
    "\7\26\3\0\1\10\1\26\1\56\1\10\10\0\1\10"+
    "\10\0\1\26\4\0\1\26\2\0\17\26\1\103\2\26"+
    "\3\0\1\10\1\26\1\56\1\10\10\0\1\10\10\0"+
    "\1\26\4\0\1\26\2\0\15\26\1\104\4\26\3\0"+
    "\1\10\1\26\1\56\1\10\10\0\1\10\10\0\1\26"+
    "\4\0\1\26\2\0\11\26\1\105\10\26\3\0\1\10"+
    "\1\26\1\56\1\10\10\0\1\10\10\0\1\26\4\0"+
    "\1\26\2\0\16\26\1\106\3\26\3\0\1\10\1\26"+
    "\1\56\1\10\10\0\1\10\10\0\1\26\4\0\1\26"+
    "\2\0\16\26\1\107\3\26\3\0\1\10\1\26\1\56"+
    "\1\10\10\0\1\10\10\0\1\26\4\0\1\26\2\0"+
    "\17\26\1\110\2\26\3\0\1\10\1\26\1\56\1\10"+
    "\10\0\1\10\10\0\1\26\4\0\1\26\2\0\10\26"+
    "\1\111\11\26\3\0\1\10\1\26\1\56\1\10\10\0"+
    "\1\10\10\0\1\26\4\0\1\26\2\0\10\26\1\112"+
    "\11\26\3\0\1\10\1\26\1\56\1\10\10\0\1\10"+
    "\10\0\1\26\4\0\1\26\2\0\11\26\1\113\10\26"+
    "\3\0\1\10\1\26\1\56\1\10\10\0\1\10\10\0"+
    "\1\26\4\0\1\26\2\0\16\26\1\114\3\26\3\0"+
    "\1\10\1\26\1\56\1\10\10\0\1\10\10\0\1\26"+
    "\4\0\1\26\2\0\5\26\1\115\14\26\3\0\1\10"+
    "\1\26\1\56\1\10\10\0\1\10\10\0\1\26\4\0"+
    "\1\26\2\0\15\26\1\116\4\26\3\0\1\10\1\26"+
    "\1\56\1\10\10\0\1\10\10\0\1\26\4\0\1\26"+
    "\2\0\17\26\1\117\2\26\3\0\1\10\1\26\1\56"+
    "\1\10\10\0\1\10\10\0\1\26\4\0\1\26\2\0"+
    "\5\26\1\120\14\26\3\0\1\10\1\26\1\56\1\10"+
    "\10\0\1\10\10\0\1\26\4\0\1\26\2\0\4\26"+
    "\1\121\15\26\3\0\1\10\1\26\1\56\1\10\10\0"+
    "\1\10\10\0\1\26\4\0\1\26\2\0\11\26\1\122"+
    "\10\26\3\0\1\10\1\26\1\56\1\10\10\0\1\10"+
    "\10\0\1\26\4\0\1\26\2\0\5\26\1\123\14\26"+
    "\3\0\1\10\1\26\1\56\1\10\10\0\1\10\10\0"+
    "\1\26\4\0\1\26\2\0\14\26\1\124\5\26\3\0"+
    "\1\10\1\26\1\56\1\10\10\0\1\10\10\0\1\26"+
    "\4\0\1\26\2\0\5\26\1\125\14\26\3\0\1\10"+
    "\1\26\1\56\1\10\10\0\1\10\10\0\1\26\4\0"+
    "\1\26\2\0\12\26\1\126\7\26\3\0\1\10\1\26"+
    "\1\56";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2500];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\6\1\6\11\2\1\1\11\4\1\2\11"+
    "\12\1\1\11\1\1\1\11\1\1\1\11\1\0\1\11"+
    "\1\0\1\11\1\1\1\11\1\1\1\0\5\11\13\1"+
    "\1\11\26\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[86];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
private Symbol symbol(int sym) {
    return new Symbol(sym, yyline+1, yycolumn+1);
}
  
private Symbol symbol(int sym, Object val) {
   return new Symbol(sym, yyline+1, yycolumn+1, val);
}

private void error(String message) {
   System.out.println("Error at line "+ (yyline+1) + ", column " + (yycolumn+ 1)+ " : "+message);
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("ERROR");error(yytext());
            }
            // fall through
          case 42: break;
          case 2:
            { /* Ignore */
            }
            // fall through
          case 43: break;
          case 3:
            { return symbol(BANG);
            }
            // fall through
          case 44: break;
          case 4:
            { return symbol(ID, yytext());
            }
            // fall through
          case 45: break;
          case 5:
            { return symbol(LPAREN);
            }
            // fall through
          case 46: break;
          case 6:
            { return symbol(RPAREN);
            }
            // fall through
          case 47: break;
          case 7:
            { return symbol(MULT);
            }
            // fall through
          case 48: break;
          case 8:
            { return symbol(ADD);
            }
            // fall through
          case 49: break;
          case 9:
            { return symbol(COMMA);
            }
            // fall through
          case 50: break;
          case 10:
            { return symbol(SUB);
            }
            // fall through
          case 51: break;
          case 11:
            { return symbol(DIV);
            }
            // fall through
          case 52: break;
          case 12:
            { return symbol(NUMERIC_CONSTANT, new Integer(Integer.parseInt(yytext())));
            }
            // fall through
          case 53: break;
          case 13:
            { return symbol(SEMI);
            }
            // fall through
          case 54: break;
          case 14:
            { return symbol(LT);
            }
            // fall through
          case 55: break;
          case 15:
            { return symbol(EQL);
            }
            // fall through
          case 56: break;
          case 16:
            { return symbol(GT);
            }
            // fall through
          case 57: break;
          case 17:
            { return symbol(LSQBKT);
            }
            // fall through
          case 58: break;
          case 18:
            { return symbol(RSQBKT);
            }
            // fall through
          case 59: break;
          case 19:
            { return symbol(LBRKT);
            }
            // fall through
          case 60: break;
          case 20:
            { return symbol(RBRKT);
            }
            // fall through
          case 61: break;
          case 21:
            { return symbol(NEQL);
            }
            // fall through
          case 62: break;
          case 22:
            { System.out.println("STRING");
            }
            // fall through
          case 63: break;
          case 23:
            { 
            }
            // fall through
          case 64: break;
          case 24:
            { return symbol(AND);
            }
            // fall through
          case 65: break;
          case 25:
            { return symbol(DLT);
            }
            // fall through
          case 66: break;
          case 26:
            { return symbol(LTEQL);
            }
            // fall through
          case 67: break;
          case 27:
            { return symbol(DEQL);
            }
            // fall through
          case 68: break;
          case 28:
            { return symbol(GTEQL);
            }
            // fall through
          case 69: break;
          case 29:
            { return symbol(DGT);
            }
            // fall through
          case 70: break;
          case 30:
            { return symbol(IF);
            }
            // fall through
          case 71: break;
          case 31:
            { return symbol(OR);
            }
            // fall through
          case 72: break;
          case 32:
            { return symbol(CIN);
            }
            // fall through
          case 73: break;
          case 33:
            { return symbol(INT);
            }
            // fall through
          case 74: break;
          case 34:
            { return symbol(BOOL);
            }
            // fall through
          case 75: break;
          case 35:
            { return symbol(COUT);
            }
            // fall through
          case 76: break;
          case 36:
            { return symbol(ELSE);
            }
            // fall through
          case 77: break;
          case 37:
            { return symbol(TRUE);
            }
            // fall through
          case 78: break;
          case 38:
            { return symbol(VOID);
            }
            // fall through
          case 79: break;
          case 39:
            { return symbol(FALSE);
            }
            // fall through
          case 80: break;
          case 40:
            { return symbol(WHILE);
            }
            // fall through
          case 81: break;
          case 41:
            { return symbol(RETURN);
            }
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
